# This config was automatically generated from your source code
# Stacks detected: cicd:github-actions:.github/workflows,deps:node:.,deps:ruby:.,package_manager:yarn:
version: 2.1
orbs:
  node: circleci/node@5
  ruby: circleci/ruby@2.0.1
jobs:
  build-node:
    # Build node project
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Print node install help instructions
          command: |-
            echo "One cause for node package install failure is if you have private repositories that it can't reach
            One way to fix this for private npm packages:
              1. Use the npm CLI's \"login\" command to create a token (usually saved in your user's \"~/.npmrc\" file)
                For more info, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=set%20the%20%24npm_token%20environment%20variable%20in%20circleci
              2. Add a NPM_TOKEN to an org context
                For info on how to use contexts, see https://circleci.com/docs/contexts/
              3. Add a .circleci/config.yml to your repository or use this config.yml as a starting template
              4. Configure the jobs to use the context that includes NPM_TOKEN
              5. Add a step to inject your NPM_TOKEN environment variable into npm before \"install-packages\"
                For an example, see https://circleci.com/blog/publishing-npm-packages-using-circleci-2-0/#:~:text=the%20deploy%20job%20has%20several%20steps%20that%20run%20to%20authenticate%20with%20and%20publish%20to"
          when: on_fail
      - run:
          command: yarn run build
      - run:
          name: Create the ~/artifacts directory if it doesn't exist
          command: mkdir -p ~/artifacts
      # Copy output to artifacts dir
      - run:
          name: Copy artifacts
          command: cp -R build dist public .output .next .docusaurus ~/artifacts 2>/dev/null || true
      - store_artifacts:
          path: ~/artifacts
          destination: node-build
  test-ruby:
    # Install gems, run rake tests
    docker:
      - image: cimg/ruby:3.0.6-node
    steps:
      - checkout
      - ruby/install-deps
      - run:
          name: rake test
          command: bundle exec rake test
  deploy:
    # This is an example deploy job, not actually used by the workflow
    docker:
      - image: cimg/base:stable
    steps:
      # Replace this with steps to deploy to users
      - run:
          name: deploy
          command: '#e.g. ./deploy.sh'
      - run:
          name: found github actions config
          command: ':'
workflows:
  build-and-test:
    jobs:
      - build-node:
          requires:
            - test-ruby
      - test-ruby
    # - deploy:
    #     requires:
    #       - build-node
